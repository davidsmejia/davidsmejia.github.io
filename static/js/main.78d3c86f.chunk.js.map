{"version":3,"sources":["components/Sprite/Sprite.js","components/Header/Header.js","components/ContentBlock/ContentBlock.js","components/Background/Background.js","App.js","serviceWorker.js","index.js"],"names":["Sprite","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","scale","parseFloat","scaledWidth","data","width","scaledHeight","height","_this$props$data","background","pixels","ctx","current","getContext","beginPath","clearRect","fillStyle","fillRect","i","length","Math","floor","restore","react_default","a","createElement","ref","Component","Header","sprite","content","className","components_Sprite_Sprite","name","job","location","blurb","ContentBlock","api","sprites","title","Background","size","scrollTop","getScrollPercent","bubbles","drawAlpha","fadeAlpha","image","push","x","random","y","derivation","getRandomInt","speed","color","getRandColor","abs","document","body","getBoundingClientRect","top","clientHeight","window","innerHeight","toString","min","max","_this2","canvas","scrollPercent","globalAlpha","globalCompositeOperation","forEach","bubble","strokeStyle","lineWidth","shadowBlur","shadowColor","arc","PI","stroke","fill","drawImage","requestAnimationFrame","update","bind","addEventListener","onScroll","removeEventListener","App","map","contentItem","key","components_ContentBlock_ContentBlock","components_Header_Header","header","components_Background_Background","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+mKA8CeA,qBA1Cb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,UAAYC,IAAMC,YACvBT,EAAKU,MAAQC,WAAWZ,EAAMW,QAAU,EACxCV,EAAKY,YAAcZ,EAAKU,MAAMV,EAAKD,MAAMc,KAAKC,MAC9Cd,EAAKe,aAAef,EAAKU,MAAMV,EAAKD,MAAMc,KAAKG,OAL9BhB,mFAQC,IAAAiB,EAEoBd,KAAKJ,MAAMc,KAAzCC,EAFUG,EAEVH,MAAOI,EAFGD,EAEHC,WAAYC,EAFTF,EAESE,OAErBC,EADSjB,KAAKI,UAAUc,QACXC,WAAW,MAE9BF,EAAIG,YACJH,EAAII,UAAU,EAAG,EAAGrB,KAAKS,YAAaT,KAAKY,cAEvCG,IACFE,EAAIK,UAAYP,EAChBE,EAAIM,SAAS,EAAG,EAAGvB,KAAKS,YAAaT,KAAKY,eAK5C,IAAK,IAAIY,EAAI,EAAGA,EAAIR,EAAOS,OAAQD,IAChB,MAAbR,EAAOQ,KACXP,EAAIG,YACJH,EAAIK,UAAYN,EAAOQ,GACvBP,EAAIM,SAASvB,KAAKO,OAAOiB,EAAEb,GAAQX,KAAKO,MAAMmB,KAAKC,MAAMH,EAAEb,GAAQX,KAAKO,MAAOP,KAAKO,QAGtFU,EAAIW,yFAOJ,OAAOC,EAAAC,EAAAC,cAAA,UAAQpB,MAAOX,KAAKS,YAAaI,OAAQb,KAAKY,aAAcoB,IAAKhC,KAAKI,mBAxC5D6B,cCwBNC,cAnBb,SAAAA,EAAYtC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkC,IACjBrC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoC,GAAA/B,KAAAH,KAAMJ,KACDuC,OAAStC,EAAKD,MAAMuC,OACzBtC,EAAKuC,QAAUvC,EAAKD,MAAMwC,QAHTvC,wEAOjB,OACEgC,EAAAC,EAAAC,cAAA,UAAQM,UAAU,cAChBR,EAAAC,EAAAC,cAACO,EAAD,CAAQ5B,KAAMV,KAAKmC,OAAQ5B,MAAM,OACjCsB,EAAAC,EAAAC,cAAA,UAAK/B,KAAKoC,QAAQG,MAClBV,EAAAC,EAAAC,cAAA,KAAGM,UAAU,OAAOrC,KAAKoC,QAAQI,KACjCX,EAAAC,EAAAC,cAAA,KAAGM,UAAU,YAAYrC,KAAKoC,QAAQK,UACtCZ,EAAAC,EAAAC,cAAA,KAAGM,UAAU,SAASrC,KAAKoC,QAAQM,eAftBT,aCoBNU,qBAhBb,SAAAA,EAAY/C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,IACjB9C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6C,GAAAxC,KAAAH,KAAMJ,KACDwC,QAAUvC,EAAKD,MAAMwC,QAFTvC,wEAMjB,OACEgC,EAAAC,EAAAC,cAAA,WAASM,UAAU,iBACjBR,EAAAC,EAAAC,cAACO,EAAD,CAAQ5B,KAAMkC,EAAIC,QAAQ7C,KAAKoC,QAAQD,QAAS5B,MAAM,MACtDsB,EAAAC,EAAAC,cAAA,KAAGM,UAAU,uBAAuBrC,KAAKoC,QAAQU,OACjDjB,EAAAC,EAAAC,cAAA,KAAGM,UAAU,uBAAuBrC,KAAKoC,QAAQM,eAZ9BT,cCqHZc,qBAtHb,SAAAA,EAAYnD,GAAO,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+C,IACjBlD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiD,GAAA5C,KAAAH,KAAMJ,KAEDoD,KAAO,KAEZnD,EAAKO,UAAYC,IAAMC,YACvBT,EAAKoD,UAAYpD,EAAKqD,mBACtBrD,EAAKsD,QAAY,GACjBtD,EAAKuD,UAAY,EACjBvD,EAAKwD,UAAY,EACjBxD,EAAKyD,MAAY,KAEjB,IAAK,IAAI9B,EAAI,EAAGA,EAAI,GAAIA,IACtB3B,EAAKsD,QAAQI,KAAK,CAChBC,EAAG,IAAI9B,KAAK+B,SACZC,EAAG7D,EAAKmD,KACRA,KAAM,EACNW,WAAY9D,EAAK+D,aAAa,GAAI,KAClCC,MAAOhE,EAAK+D,aAAa,EAAG,IAC5BE,MAAOjE,EAAKkE,iBAnBC,OAAAlE,0EA2BjBG,KAAKiD,UAAYjD,KAAKkD,mBACtBlD,KAAKoD,UAAY,EACjBpD,KAAKqD,UAAY,6CAIjB,OAAO,IAAI3B,KAAKsC,IAAIC,SAASC,KAAKC,wBAAwBC,MAAMH,SAASC,KAAKG,aAAaC,OAAOC,oDAMlG,MAAO,MAAM,GAAG,IAAI7C,KAAK+B,SAAS,GAAGe,SAAS,yCAGnCC,EAAKC,GAChB,OAAOhD,KAAKC,MAAMD,KAAK+B,UAAYiB,EAAMD,EAAM,GAAKA,oCAK7C,IAAAE,EAAA3E,KAED4E,EAAS5E,KAAKI,UAAUc,QACxBD,EAAM2D,EAAOzD,WAAW,MAC1B0D,EAAgB7E,KAAKkD,mBAErBlD,KAAKoD,UAAY,GAEnBpD,KAAKoD,UAAY1B,KAAKgD,IAAI,EAAG1E,KAAKoD,UAAY,IAE9CnC,EAAI6D,YAAc,GAAG9E,KAAKoD,UAE1BnC,EAAI8D,yBAAyB,mBAE7B/E,KAAKmD,QAAQ6B,QAAQ,SAACC,GAGpBA,EAAOzB,EAAI9B,KAAK+C,IAAIE,EAAK3B,KAAMtB,KAAKgD,IAAI,EAAGC,EAAKf,aAAaqB,EAAOzB,EAAEyB,EAAOtB,WAAYsB,EAAOzB,EAAEyB,EAAOtB,cACzGsB,EAAOvB,EAAKuB,EAAOvB,EAAEuB,EAAOpB,MAASc,EAAK3B,KAAO,EAAGiC,EAAOvB,EAAEuB,EAAOpB,MACpEoB,EAAOjC,KAAOtB,KAAKgD,IAAI,GAAIhD,KAAK+C,IAAI,GAAG,IAAMI,GAAgBF,EAAK3B,OAGlE/B,EAAIG,YAEJH,EAAIiE,YAAcP,EAAKZ,eACvB9C,EAAIK,UAAYqD,EAAKZ,eACrB9C,EAAIkE,UAAY,GAChBlE,EAAImE,WAAaP,EACjB5D,EAAIoE,YAAaJ,EAAOnB,MACxB7C,EAAIqE,IAAIL,EAAOzB,EAAGyB,EAAOvB,EAAGuB,EAAOjC,KAAM,EAAG,EAAItB,KAAK6D,IACrDtE,EAAIuE,SACJvE,EAAIwE,SAGNxE,EAAI8D,yBAAyB,eAEpB/E,KAAKqD,UAAY,IAE1BrD,KAAKqD,UAAY3B,KAAKgD,IAAI,EAAG1E,KAAKqD,UAAY,MAC9CpC,EAAI6D,YAAY9E,KAAKqD,UACrBpC,EAAI8D,yBAAyB,OAC7B9D,EAAIyE,UAAUd,EAAO,EAAE,EAAE5E,KAAKgD,KAAKhD,KAAKgD,KAAK,EAAE,EAAEhD,KAAKgD,KAAKhD,KAAKgD,MAChE/B,EAAI6D,YAAY,EAChB7D,EAAI8D,yBAAyB,eAIR,IAAnB/E,KAAKqD,WAAiBpC,EAAII,UAAU,EAAG,EAAGrB,KAAKgD,KAAMhD,KAAKgD,MAE9D2C,sBAAsB3F,KAAK4F,OAAOC,KAAK7F,mDAMvCsE,OAAOwB,iBAAiB,SAAU9F,KAAK+F,SAASF,KAAK7F,OAErD2F,sBAAsB3F,KAAK4F,OAAOC,KAAK7F,sDAKvCsE,OAAO0B,oBAAoB,SAAUhG,KAAK+F,SAASF,KAAK7F,wCAIxD,OAAO6B,EAAAC,EAAAC,cAAA,UAAQM,UAAU,aAAa1B,MAAOX,KAAKgD,KAAMnC,OAAQb,KAAKgD,KAAMhB,IAAKhC,KAAKI,mBApHhE6B,oBCsBVgE,MAnBf,WAEE,IAAM7D,EAAUQ,EAAIR,QAAQ8D,IAAI,SAACC,EAAaC,GAAd,OAC9BvE,EAAAC,EAAAC,cAACsE,EAAD,CAAcD,IAAKA,EAAKhE,QAAS+D,MAGnC,OACEtE,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YACbR,EAAAC,EAAAC,cAACuE,EAAD,CAAQnE,OAAQS,EAAIC,QAAQD,EAAI2D,OAAOpE,QAASC,QAASQ,EAAI2D,SAC5DnE,GAEHP,EAAAC,EAAAC,cAAA,OAAKM,UAAU,kBACbR,EAAAC,EAAAC,cAACyE,EAAD,SCRYC,QACW,cAA7BnC,OAAO7B,SAASiE,UAEe,UAA7BpC,OAAO7B,SAASiE,UAEhBpC,OAAO7B,SAASiE,SAASC,MACvB,2DCZNC,IAASC,OAAOhF,EAAAC,EAAAC,cAAC+E,EAAD,MAAS7C,SAAS8C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.78d3c86f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Sprite extends Component {\n\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.scale = parseFloat(props.scale) || 1;\n    this.scaledWidth = this.scale*this.props.data.width;\n    this.scaledHeight = this.scale*this.props.data.height;\n  }\n\n  componentDidMount() {\n\n    const { width, background, pixels } = this.props.data;\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.beginPath();\n    ctx.clearRect(0, 0, this.scaledWidth, this.scaledHeight);\n\n    if (background) {\n      ctx.fillStyle = background;\n      ctx.fillRect(0, 0, this.scaledWidth, this.scaledHeight);\n    }\n\n\n    //draw pixels\n    for (var i = 0; i < pixels.length; i++) {\n      if (pixels[i] == null) continue;\n      ctx.beginPath();\n      ctx.fillStyle = pixels[i];\n      ctx.fillRect(this.scale*(i%width), this.scale*Math.floor(i/width), this.scale, this.scale);\n    }\n\n    ctx.restore();\n  }\n\n  componentDidUpdate() {\n  }\n\n  render() {\n    return <canvas width={this.scaledWidth} height={this.scaledHeight} ref={this.canvasRef} />;\n  }\n}\n\nexport default Sprite;\n","import './Header.css';\n\nimport React, { Component } from 'react';\nimport Sprite from '../Sprite/Sprite.js';\n\nclass Header extends Component {\n\n  constructor(props) {\n    super(props);\n    this.sprite = this.props.sprite;\n    this.content = this.props.content;\n  }\n\n  render() {\n    return (\n      <header className=\"App-header\">\n        <Sprite data={this.sprite} scale=\"13\"/>\n        <h1>{this.content.name}</h1>\n        <p className=\"job\">{this.content.job}</p>\n        <p className=\"location\">{this.content.location}</p>\n        <p className=\"blurb\">{this.content.blurb}</p>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import './ContentBlock.css';\n\nimport React, { Component } from 'react';\n\nimport api from '../../api.json';\nimport Sprite from '../Sprite/Sprite.js';\n\nclass ContentBlock extends Component {\n\n  constructor(props) {\n    super(props);\n    this.content = this.props.content\n  }\n\n  render() {\n    return (\n      <section className=\"content-block\">\n        <Sprite data={api.sprites[this.content.sprite]} scale=\"6\"/>\n        <p className=\"content-block-title\">{this.content.title}</p>\n        <p className=\"content-block-blurb\">{this.content.blurb}</p>\n      </section>\n    );\n  }\n}\n\nexport default ContentBlock;\n","import './Background.css';\n\nimport React, { Component } from 'react';\n\nclass Background extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.size = 1500;\n\n    this.canvasRef = React.createRef();\n    this.scrollTop = this.getScrollPercent();\n    this.bubbles   = [];\n    this.drawAlpha = 1;\n    this.fadeAlpha = 1;\n    this.image     = null;\n\n    for (var i = 0; i < 10; i++) {\n      this.bubbles.push({\n        x: 500*Math.random(),\n        y: this.size,\n        size: 1,\n        derivation: this.getRandomInt(50, 200),\n        speed: this.getRandomInt(0, 20),\n        color: this.getRandColor()\n      });\n    }\n  }\n\n  //scrolling\n\n  onScroll() {\n    this.scrollTop = this.getScrollPercent();\n    this.drawAlpha = 1;\n    this.fadeAlpha = 1;\n  }\n\n  getScrollPercent() {\n    return 100*Math.abs(document.body.getBoundingClientRect().top)/(document.body.clientHeight-window.innerHeight);\n  }\n\n  //helpers\n\n  getRandColor() {\n    return \"#\"+((1<<24)*Math.random()|0).toString(16);\n  }\n\n  getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n\n  //draw\n\n  update() {\n\n    const canvas = this.canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let scrollPercent = this.getScrollPercent();\n\n    if (this.drawAlpha > 0) {\n\n      this.drawAlpha = Math.max(0, this.drawAlpha - .1);\n\n      ctx.globalAlpha = .4*this.drawAlpha;\n\n      ctx.globalCompositeOperation='destination-over';\n\n      this.bubbles.forEach((bubble) => {\n\n        // update bubble values\n        bubble.x = Math.min(this.size, Math.max(0, this.getRandomInt(bubble.x-bubble.derivation, bubble.x+bubble.derivation)));\n        bubble.y = (bubble.y+bubble.speed) > this.size ? 0: bubble.y+bubble.speed;\n        bubble.size = Math.max(10, Math.min(2*(100 - scrollPercent), this.size));\n\n\n        ctx.beginPath();\n\n        ctx.strokeStyle = this.getRandColor();\n        ctx.fillStyle = this.getRandColor();\n        ctx.lineWidth = .5;\n        ctx.shadowBlur = scrollPercent;\n        ctx.shadowColor= bubble.color;\n        ctx.arc(bubble.x, bubble.y, bubble.size, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.fill();\n      });\n\n      ctx.globalCompositeOperation='source-over';\n\n    } else if (this.fadeAlpha > 0) {\n\n      this.fadeAlpha = Math.max(0, this.fadeAlpha - .005);\n      ctx.globalAlpha=this.fadeAlpha;\n      ctx.globalCompositeOperation='copy';\n      ctx.drawImage(canvas,0,0,this.size,this.size,0,0,this.size,this.size);\n      ctx.globalAlpha=1.00;\n      ctx.globalCompositeOperation='source-over';\n    }\n\n    // clear out if nothing there is this cheap enough?\n    if (this.fadeAlpha === 0) ctx.clearRect(0, 0, this.size, this.size);\n\n    requestAnimationFrame(this.update.bind(this));\n\n  }\n\n  componentDidMount() {\n\n    window.addEventListener('scroll', this.onScroll.bind(this));\n\n    requestAnimationFrame(this.update.bind(this));\n\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.onScroll.bind(this));\n  }\n\n  render() {\n    return <canvas className=\"background\" width={this.size} height={this.size} ref={this.canvasRef} />;\n  }\n}\n\nexport default Background;\n","import React from 'react';\nimport api from './api.json';\nimport Header from './components/Header/Header.js';\nimport ContentBlock from './components/ContentBlock/ContentBlock.js';\nimport Background from './components/Background/Background.js';\nimport './App.css';\n\nfunction App() {\n\n  const content = api.content.map((contentItem, key) =>\n    <ContentBlock key={key} content={contentItem}/>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-wrap\">\n        <Header sprite={api.sprites[api.header.sprite]} content={api.header} />\n        {content}\n      </div>\n      <div className=\"App-background\">\n        <Background />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}